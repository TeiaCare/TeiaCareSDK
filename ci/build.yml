trigger:
  branches:
    include:
    - develop
    - feature/*
    - release/*
    - hotfix/*
    exclude:
    - master
  tags:
    include:
    - v*

parameters:
- name: BUILD_TYPES
  type: object
  default: ['Debug', 'Release', 'RelWithDebInfo']

jobs:
  - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
    - job: '${{BUILD_TYPE}}'
      strategy:
        matrix:

          # Full path to MSVC 2022 build environment setup script:
          # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md#visual-studio-enterprise-2022
          windows2022_msvc2022:
            AGENT: 'windows-2022'
            COMPILER: visual_studio
            COMPILER_VERSION: 17
            SETUP_BUILD_ENV: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
            ACTIVATE_VIRTUAL_ENV: 'call ".venv\Scripts\activate.bat"'

          # Full path to MSVC 2019 build environment setup script:
          # https://github.com/actions/runner-images/blob/main/images/windows/Windows2019-Readme.md#visual-studio-enterprise-2019
          # windows2019_msvc2019:
          #   AGENT: 'windows-2019'
          #   COMPILER: visual_studio
          #   COMPILER_VERSION: 16
          #   SETUP_BUILD_ENV: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
          #   ACTIVATE_VIRTUAL_ENV: 'call ".venv\Scripts\activate.bat"'

          # ubuntu2204_gcc13:
          #   AGENT: 'ubuntu-22.04'
          #   COMPILER: gcc
          #   COMPILER_VERSION: 13
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          ubuntu2204_gcc12:
            AGENT: 'ubuntu-22.04'
            COMPILER: gcc
            COMPILER_VERSION: 12
            SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
            ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          # ubuntu2204_clang15:
          #   AGENT: 'ubuntu-22.04'
          #   COMPILER: clang
          #   COMPILER_VERSION: 15
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          # macos13_clang15:
          #   AGENT: 'macOS-13'
          #   COMPILER: clang
          #   COMPILER_VERSION: 15
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          # macos12_clang15:
          #   AGENT: 'macOS-12'
          #   COMPILER: clang
          #   COMPILER_VERSION: 15
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

      pool:
        vmImage: $(AGENT)

      steps:
        - task: UsePythonVersion@0
          displayName: Set Python version (3.10)
          inputs:
            versionSpec: '3.10'
            addToPath: true
            architecture: 'x64'

        - task: Cache@2
          inputs:
            key: "venv $(Agent.JobName)"
            path: '$(Build.SourcesDirectory)/.venv'
            cacheHitVar: 'VENV_CACHE_RESTORED'
          displayName: 'Cache Virtual Environment'

        - task: Cache@2
          inputs:
            key: 'conan $(Agent.JobName)'
            path: '$(Build.SourcesDirectory)/.conan'
            cacheHitVar: 'CONAN_CACHE_RESTORED'
          displayName: 'Cache Conan'

        - ${{ if eq(variables['VENV_CACHE_RESTORED'], 'false') }}:
          - script: |
              python3 -m venv .venv
              $(ACTIVATE_VIRTUAL_ENV)
              pip3 install -r scripts/requirements.txt
            displayName: 'Setup Virtual Environment'
        
        - ${{ if eq(variables['CONAN_CACHE_RESTORED'], 'false') }}:
          - script: |
              $(ACTIVATE_VIRTUAL_ENV)
              python3 scripts/conan/setup.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION)
            displayName: 'Setup Conan'

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake/configure.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --warnings
            python3 scripts/cmake/build.py ${{BUILD_TYPE}}
            python3 scripts/cmake/install.py ${{BUILD_TYPE}}
          displayName: 'Build'
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake/configure.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --warnings --coverage
            python3 scripts/cmake/build.py ${{BUILD_TYPE}}
            python3 scripts/cmake/install.py ${{BUILD_TYPE}}
            python3 scripts/tools/run_unit_tests.py ${{BUILD_TYPE}}
          displayName: 'Unit Tests'
          timeoutInMinutes: 5
          continueOnError: True
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - task: PublishTestResults@2
          displayName: 'Publish Unit Tests Results'
          continueOnError: True
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'results/unit_tests/unit_tests.xml'
            searchFolder: '$(Build.SourcesDirectory)'
            failTaskOnFailedTests: true
            failTaskOnFailureToPublishResults: false
            failTaskOnMissingResultsFile: true
            testRunTitle: 'TeiaCareSDK $(Agent.JobName) ${{BUILD_TYPE}}'
            buildPlatform: $(Agent.OS)
            buildConfiguration: ${{BUILD_TYPE}}

        - ${{ if eq(variables['Agent.OS'], 'Linux') }}:
          - script: |
              $(ACTIVATE_VIRTUAL_ENV)
              $(SETUP_BUILD_ENV)
              python3 scripts/tools/run_coverage.py $(COMPILER) $(COMPILER_VERSION)
            displayName: 'Code Coverage'
            timeoutInMinutes: 5
            env:
              CONAN_USER_HOME: $(Build.SourcesDirectory)

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage Results'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/export/test_results/coverage/cobertura.xml'
              additionalCodeCoverageFiles: '$(Build.SourcesDirectory)/VERSION'
              pathToSources: '$(Build.SourcesDirectory)'

        # - script: |
        #     $(ACTIVATE_VIRTUAL_ENV)
        #     $(SETUP_BUILD_ENV)
        #     python3 scripts/cmake/configure.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --benchmarks
        #     python3 scripts/cmake/build.py ${{BUILD_TYPE}}
        #     python3 scripts/cmake/install.py ${{BUILD_TYPE}}
        #   displayName: 'Benchmarks'
        #   timeoutInMinutes: 5
        #   env:
        #     CONAN_USER_HOME: $(Build.SourcesDirectory)

        # - script: |
        #     $(ACTIVATE_VIRTUAL_ENV)
        #     $(SETUP_BUILD_ENV)
        #     python3 scripts/cmake/configure.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --examples
        #     python3 scripts/cmake/build.py ${{BUILD_TYPE}}
        #     python3 scripts/cmake/install.py ${{BUILD_TYPE}}
        #   displayName: 'Examples'
        #   timeoutInMinutes: 5
        #   env:
        #     CONAN_USER_HOME: $(Build.SourcesDirectory)

        # - script: |
        #     $(ACTIVATE_VIRTUAL_ENV)
        #     $(SETUP_BUILD_ENV)
        #     python3 scripts/conan/create.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --install_dir $(Build.SourcesDirectory)
        #   #conan remote add artifactory $(ARTIFACTORY_HOST)/artifactory/api/conan/conan False
        #   #conan user $(ARTIFACTORY_USERNAME) -r artifactory -p $(ARTIFACTORY_PASSWORD)
        #   #python3 scripts/conan/upload.py VERSION artifactory
        #   displayName: 'Conan Package'
        #   timeoutInMinutes: 5
        #   env:
        #     CONAN_USER_HOME: $(Build.SourcesDirectory)

  - job: Conan
    condition: false
    strategy:
      matrix:
        gcc12_release:
          COMPILER: gcc
          COMPILER_VERSION: 12
          BUILD_TYPE: Release
        gcc12_debug:
          COMPILER: gcc
          COMPILER_VERSION: 12
          BUILD_TYPE: Debug
        clang15_release:
          COMPILER: clang
          COMPILER_VERSION: 15
          BUILD_TYPE: Release
        clang15_debug:
          COMPILER: clang
          COMPILER_VERSION: 15
          BUILD_TYPE: Debug
      maxParallel: 1
    pool:
      name: TeiaCare Build Pool
      ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'
    variables:
      - ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}: 
        - name: FORCE_UPLOAD
          value: "true"
          readonly: true
      - ${{ if ne(variables['Build.SourceBranchName'], 'develop') }}: 
        - name: FORCE_UPLOAD
          value: "false"
          readonly: true
    steps:
      - script: |
          docker build -f Dockerfile-conan --build-arg COMPILER=$(COMPILER) --build-arg COMPILER_VERSION=$(COMPILER_VERSION) --build-arg BUILD_TYPE=$(BUILD_TYPE) -t teiacore_sdk_conan .
        displayName: 'Build Docker Image'
      
      - script: |
          docker run --rm -v $PWD/ci:/teiacare_sdk/ci teiacore_sdk_conan ci/publish_conan_package.sh $(BUILD_TYPE) $(COMPILER) $(COMPILER_VERSION) $(ARTIFACTORY_HOST) $(ARTIFACTORY_USERNAME) $(ARTIFACTORY_PASSWORD) $(FORCE_UPLOAD)
        displayName: 'Create and Upload Package'

      - script: |
          docker run --rm -v $PWD/ci:/teiacare_sdk/ci -v $PWD/sdk_package_test:/teiacare_sdk/sdk_package_test teiacore_sdk_conan ci/test_conan_package.sh $(BUILD_TYPE) $(COMPILER) $(COMPILER_VERSION) $(ARTIFACTORY_HOST) $(ARTIFACTORY_USERNAME) $(ARTIFACTORY_PASSWORD)
        displayName: 'Test Package'

