trigger:
  branches:
    include:
    - develop
    - feature/*
    - release/*
    - hotfix/*
    exclude:
    - master
  tags:
    include:
    - v*

schedules:
  - cron: "0 1 * * Sun"
    displayName: 'Weekly Build'
    branches:
      include:
      - develop
    always: true

parameters:
- name: BUILD_TYPES
  type: object
  default: ['Debug', 'Release', 'RelWithDebInfo']

variables:
  - group: Artifactory

jobs:
  - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
    - job: '${{BUILD_TYPE}}'
      strategy:
        matrix:

          # Full path to MSVC 2022 build environment setup script:
          # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md#visual-studio-enterprise-2022
          windows2022_msvc2022:
            AGENT: 'windows-2022'
            COMPILER: visual_studio
            COMPILER_VERSION: 17
            SETUP_BUILD_ENV: 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
            ACTIVATE_VIRTUAL_ENV: 'call ".venv\Scripts\activate.bat"'

          # Full path to MSVC 2019 build environment setup script:
          # https://github.com/actions/runner-images/blob/main/images/windows/Windows2019-Readme.md#visual-studio-enterprise-2019
          windows2019_msvc2019:
            AGENT: 'windows-2019'
            COMPILER: visual_studio
            COMPILER_VERSION: 16
            SETUP_BUILD_ENV: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
            ACTIVATE_VIRTUAL_ENV: 'call ".venv\Scripts\activate.bat"'

          # # Not available yet
          # ubuntu2404_gcc14:
          #   AGENT: 'ubuntu-24.04'
          #   COMPILER: gcc
          #   COMPILER_VERSION: 14
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          # # Not available yet
          # ubuntu2404_clang18:
          #   AGENT: 'ubuntu-24.04'
          #   COMPILER: clang
          #   COMPILER_VERSION: 18
          #   SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
          #   ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          ubuntu2204_gcc12:
            AGENT: 'ubuntu-22.04'
            COMPILER: gcc
            COMPILER_VERSION: 12
            SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
            ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          ubuntu2204_clang15:
            AGENT: 'ubuntu-22.04'
            COMPILER: clang
            COMPILER_VERSION: 15
            SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
            ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

          macos14_clang15:
            AGENT: 'macOS-14'
            COMPILER: clang
            COMPILER_VERSION: 15
            SETUP_BUILD_ENV: 'echo $(COMPILER) $(COMPILER_VERSION)'
            ACTIVATE_VIRTUAL_ENV: 'source .venv/bin/activate'

      pool:
        vmImage: $(AGENT)

      steps:
        - checkout: self
          submodules: true

        - task: UsePythonVersion@0
          displayName: Set Python version (3.10)
          inputs:
            versionSpec: '3.10'
            addToPath: true
            architecture: 'x64'

        - task: Cache@2
          inputs:
            key: 'venv $(Agent.JobName) | scripts/requirements.txt'
            path: '$(Build.SourcesDirectory)/.venv'
            cacheHitVar: 'VENV_CACHE_RESTORED'
          displayName: 'Cache Virtual Environment'

        - task: Cache@2
          inputs:
            key: 'conan $(Agent.JobName) | sdk/examples/conanfile.txt | sdk/tests/conanfile.txt'
            path: '$(Build.SourcesDirectory)/.conan'
          displayName: 'Cache Conan'

        - script: |
            python3 -m venv .venv
            $(ACTIVATE_VIRTUAL_ENV)
            pip3 install -r scripts/requirements.txt
          displayName: 'Setup Virtual Environment'
          condition: eq(variables['VENV_CACHE_RESTORED'], 'false')

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            python3 scripts/conan/setup.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION)
          displayName: 'Setup Conan'

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --warnings
          displayName: 'Build'
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --warnings --examples
            python3 scripts/tools/run_examples.py install/examples
          displayName: 'Examples'
          timeoutInMinutes: 5
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --warnings --coverage
            python3 scripts/tools/run_unit_tests.py ${{BUILD_TYPE}}
          displayName: 'Unit Tests'
          timeoutInMinutes: 5
          continueOnError: True
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - task: PublishTestResults@2
          displayName: 'Publish Unit Tests Results'
          continueOnError: True
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'results/unit_tests/unit_tests.xml'
            searchFolder: '$(Build.SourcesDirectory)'
            failTaskOnFailedTests: true
            failTaskOnFailureToPublishResults: false
            failTaskOnMissingResultsFile: true
            testRunTitle: '$(Agent.JobName) ${{BUILD_TYPE}}'
            buildPlatform: $(Agent.OS)
            buildConfiguration: ${{BUILD_TYPE}}

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/tools/run_coverage.py $(COMPILER) $(COMPILER_VERSION)
          displayName: 'Code Coverage'
          condition: eq(variables['Agent.OS'], 'Linux')
          timeoutInMinutes: 5
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage Results'
          condition: eq(variables['Agent.OS'], 'Linux')
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Build.SourcesDirectory)/results/coverage/cobertura.xml'
            additionalCodeCoverageFiles: '$(Build.SourcesDirectory)/VERSION'
            pathToSources: '$(Build.SourcesDirectory)'

        # - script: |
        #     $(ACTIVATE_VIRTUAL_ENV)
        #     $(SETUP_BUILD_ENV)
        #     sudo apt-get install valgrind
        #     python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --unit_tests
        #     python scripts/tools/run_valgrind.py --memcheck install/unit_tests/teiacare_sdk_unit_tests
        #   displayName: 'Valgrind'
        #   condition: eq(variables['Agent.OS'], 'Linux')
        #   timeoutInMinutes: 5
        #   continueOnError: True
        #   env:
        #     CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --address_sanitizer --unit_tests
            python3 scripts/tools/run_sanitizer.py --address_sanitizer install/unit_tests/teiacare_sdk_unit_tests
          displayName: 'Address Sanitizer'
          condition: eq(variables['Agent.OS'], 'Linux')
          timeoutInMinutes: 5
          continueOnError: True
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            python3 scripts/cmake.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION) --thread_sanitizer --unit_tests
            python3 scripts/tools/run_sanitizer.py --thread_sanitizer install/unit_tests/teiacare_sdk_unit_tests
          displayName: 'Thread Sanitizer'
          condition: eq(variables['Agent.OS'], 'Linux')
          timeoutInMinutes: 5
          continueOnError: True
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)

        - script: |
            $(ACTIVATE_VIRTUAL_ENV)
            $(SETUP_BUILD_ENV)
            conan config set general.revisions_enabled=0
            conan remote add teiacare $(artifactory.url)/teiacare
            conan user $(artifactory.username) -p $(artifactory.password) -r teiacare
            python3 scripts/conan/create.py ${{BUILD_TYPE}} $(COMPILER) $(COMPILER_VERSION)
            python3 scripts/conan/upload.py teiacare teiacare_sdk/0.1.0@
          displayName: 'Conan Package'
          timeoutInMinutes: 5
          env:
            CONAN_USER_HOME: $(Build.SourcesDirectory)
