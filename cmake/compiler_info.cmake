function(get_compiler_versions)
    string(REGEX MATCH "^([0-9]+)\\.([0-9]+)\\.([0-9]+)" COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
    set(COMPILER_VERSION_MAJOR ${CMAKE_MATCH_1} PARENT_SCOPE)
    set(COMPILER_VERSION_MINOR ${CMAKE_MATCH_2} PARENT_SCOPE)
    set(COMPILER_VERSION_PATCH ${CMAKE_MATCH_3} PARENT_SCOPE)
endfunction()

function(get_compiler_name)
    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
        set(COMPILER_NAME_C "gcc" PARENT_SCOPE)
        set(COMPILER_NAME_CXX "g++" PARENT_SCOPE)
    elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
        set(COMPILER_NAME_C "clang" PARENT_SCOPE)
        set(COMPILER_NAME_CXX "clang++" PARENT_SCOPE)
    elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
        set(COMPILER_NAME_C "Visual Studio" PARENT_SCOPE)
        set(COMPILER_NAME_CXX "Visual Studio" PARENT_SCOPE)
    else()
        set(COMPILER_NAME_C "COMPILER_NOT_SUPPORTED" PARENT_SCOPE)
        set(COMPILER_NAME_CXX "COMPILER_NOT_SUPPORTED" PARENT_SCOPE)
        message(FATAL_ERROR "COMPILER_NOT_SUPPORTED: ${CMAKE_CXX_COMPILER_ID}")
    endif()
endfunction()

# Add support for std::string debug on clang compilers
if (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    add_compile_options(-fstandalone-debug)
endif()